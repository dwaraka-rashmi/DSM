Updated TODO

Due to lack of networking functionalities and unavailability of Off the Shelf networking capabilities, we are modifying the scope of the project to implement Distributed Shared Memory component on Linux OS.

1. Run 10 instances of Linux
2. Build centralized manager
	1. handle page faults
	2. memory allocation
3. RPC module for socket connection
4. client libraries to enable interaction redirection of memory access to shared location
5. Implement Memory Coherance



TODO

1. Run 10 instances of xv6
2. Connect the instances with a TCP connection
3. Start with distributed memory manager for shared memory component which will be part of all the instances of the xv6
4. The distributed memory manager should handle following:
    1. Virtual address to physical address translation
    2. Identify if the memory access is local or shared
    3. implement page faults (additional if time)
    4. implement read and write with coherence
    5. current design decision: only 50% of memory of each system will be shared across. rest is used for local system operations
    6. shared malloc and free library which handles the shared region only
    7. modify current malloc and free to be restricted to local memory
    8. free should handle reference counts before giving up the memory allocated
    9. implement tcp conection as part of memory access abstraction layer
5. Identify system calls to be part of kernel
6. kernel modification to handle shared memory details


Design decision:
1. running DSM as part of kernel or in user space?




